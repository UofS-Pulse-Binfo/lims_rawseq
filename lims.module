<?php
/**
 * @file
 * The bones of the LIMS system.
 */

/**
 * @section
 * "Sequencing Run" Node/Content type.
 */

/**
 * Implements hook_node_info().
 * Register the "Sequencing Run" node/content type with Drupal.
 */
function lims_node_info() {
  $node_types = array();

  $node_types['seq_run'] = array(
    'name' => t('Sequencing Run'),
    'base' => 'seqrun',
    'description' => t('Information about a run of sequencing. This is used to keep track of raw sequence that will not be loading into KnowPulse directly but for which meta data including file locations need to be stored.'),
    'title_label' => t('Run Name'),
    'locked' => TRUE
  );

  return $node_types;
}

/**
 * Implements hook_load().
 * Loads our custom values into the node object for viewing and updating.
 */
function seqrun_load(&$nodes) {

  // Keep track of the sample file ids while populating the main data
  // to make for more efficient retrieval of samples later.
  $sample_fids = array();

  // Select all the details to populate the nodes.
  $nids = array_keys($nodes);
  if (count($nids) > 1) {
    $results = db_query('
      SELECT *
      FROM {lims_seqrun} run
      LEFT JOIN {lims_seqrun_species} org ON org.run_id=run.run_id
      WHERE nid IN (:nids)',
      array(':nids' => $nids)
    );
  }
  else {
    $results = db_query('
      SELECT *
      FROM {lims_seqrun} run
      LEFT JOIN {lims_seqrun_species} org ON org.run_id=run.run_id
      WHERE nid=:nid',
      array(':nid' => $nids)
    );
  }

  // Now add them all to the nodes.
  foreach($results as $r) {
    $nodes[$r->nid]->run_id = $r->run_id;
    $nodes[$r->nid]->run_name = $r->run_name;
    $nodes[$r->nid]->filename = $r->filename;
    $nodes[$r->nid]->md5sum = $r->md5sum;
    $nodes[$r->nid]->library_type = $r->library_type;
    $nodes[$r->nid]->insert_length = $r->insert_length;
    $nodes[$r->nid]->fragment_length = $r->fragment_length;
    $nodes[$r->nid]->index_type = $r->index_type;
    $nodes[$r->nid]->technology = $r->technology;
    $nodes[$r->nid]->read_type = $r->read_type;
    $nodes[$r->nid]->description = $r->description;
    $nodes[$r->nid]->samples_fid = $r->samples_fid;
    $nodes[$r->nid]->samples = array();

    // Keep track of the sample file id for each loaded node
    // so that we can attach the samples later.
    if ($r->samples_fid) {
      $sample_fids[$r->samples_fid] = $r->nid;
    }

    // Since there can be more than one species, the join above will actually
    // return multiple rows (r's) for a single node. Thus we need to check if
    // this node already has a species set and if it does then add to not
    // override the array. Above we just override the values since they
    // will not change between rows and that's faster then checking first.
    if (isset($nodes[$r->nid]->species)) {
      $nodes[$r->nid]->species[$r->organism_id] = chado_generate_var('organism', array('organism_id' => $r->organism_id));
    }
    else {
      $nodes[$r->nid]->species = array($r->organism_id => chado_generate_var('organism', array('organism_id' => $r->organism_id)));
    }
  }

  // Now retrieve and add samples.
  if (sizeof($sample_fids) > 0) {
    $results = db_query('
      SELECT *
      FROM {lims_seqrun_samples}
      WHERE samples_fid IN (:fids)
      ORDER BY sample_id ASC
    ', array(':fids' => array_keys($sample_fids)));
    // Add each sample to the appropriate node based on the sample fids array
    // we created above which maps fid to nid.
    foreach($results as $r) {
      $nid = $sample_fids[$r->samples_fid];

      $sample = array(
        'sample_id' => $r->sample_id,
        'index_id' => $r->index_id,
        'index_seq' => $r->index_seq,
        'sample_name' => $r->sample_name,
        'sample_accession' => $r->sample_accession,
        'sample_stock_id' => $r->sample_stock_id,
        'sample_stock_nid' => $r->sample_stock_nid,
        'sample_description' => $r->sample_description,
        'plate_well' => $r->plate_well,
      );
      $nodes[$nid]->samples[] = (object) $sample;
    }
  }
}

/**
 * Implement hook_form().
 * Creates the node/page add/edit form for a "Sequencing Run".
 */
function seqrun_form($node, $form_state) {
  $form = node_content_form($node, $form_state);

  $form['general'] = array(
    '#type' => 'fieldset'
  );

  $form['title']['#description'] = t('Choose a short, descriptive name for the run.');
  $form['general']['title'] = $form['title'];
  unset($form['title']);

  // Hard-coded options.
  // Change the arrays below to change the options available for each select.
  // NOTE: species are based on those in the chado organism table so cannot
  // be changed manually.
  $options = array(
    'species' => array(),
    'technology' => array(
      'Sanger',
      'Illumina GAIIx',
      'Illumina HiSeq',
      'Illumina MiSeq',
      'Roche 454',
      'PacBio RS',
      'Oxforn Nanopore',
    ),
    'read_type' => array(
      'Single end',
      'Paired-end',
      'Mate Pair (FR)',
      'Mate Pair (RF)',
    ),
    'library_type' => array(
      'Genomic',
      'RNA-seq',
      '3\' transcript',
      'Single-enzyme GBS',
      'Dual-enzyme GBS',
      'ChIPseq',
    ),
    'index_type' => array(
      'None',
      'Illumina indexing',
      'GBS 96-plex',
      'Other',
    ),
  );
  // Add Species options.
  $results = chado_query("SELECT organism_id, genus||' '||species as scientific_name FROM {organism} ORDER BY genus ASC, species ASC");
  foreach ($results as $r) {
    $options['species'][$r->organism_id] = $r->scientific_name;
  }

  $form['run_id'] = array(
    '#type' => 'hidden',
    '#value' => (isset($node->run_id)) ? $node->run_id : NULL,
  );

  // Ensure keys = values.
  foreach ($options as $category => $opts) {
    if ($category != 'species') {
      $options[$category] = array_combine($opts, $opts);
    }
  }

  // Add a little bit of theme-ing for the form.
  $form['#attached']['css'][] = array(
    'type' => 'inline',
    'data' => '
      select {
        width: 370px;
      }
      em {
        font-weight: bold;
        font-style: italic;
      }
      .footnotes {
        margin-left: 25px;
      }
    '
  );
  // This is needed to remove error messages associated with a previously
  // uploaded file which has since been removed.
  $form['#attached']['js'][] = array(
    'type' => 'inline',
    'data' => "
      Drupal.behaviors.limsSeqRun_nodeFormSamplesErrorRemove = {
          attach: function (context, settings) {

            if(document.getElementById('edit-sample-file-upload-button')) {
              jQuery('div.messages.error').remove();
            }
      }};
    "
  );

  $form['general']['species'] = array(
    '#type' => 'select',
    '#title' => 'Species',
    '#description' => 'Please select the species the sequencing was done on. If your samples are from multiple species, then ctrl + click to select all species represented. Furethermore, if your species is not in this list, please contact Larissa or Lacey before entering data.',
    '#options' => $options['species'],
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#default_value' => (isset($node->species)) ? array_keys($node->species) : NULL,
  );

  $form['library'] = array(
    '#type' => 'fieldset',
    '#title' => t('Library-Specific Details'),
  );

  $form['library']['library_type'] = array(
    '#type' => 'select',
    '#title' => t('Library Type'),
    '#description' => t('The method of library preparation for sequencing.'),
    '#options' => $options['library_type'],
    '#required' => TRUE,
    '#default_value' => (isset($node->library_type)) ? $node->library_type : '',
  );

  $form['library']['insert_len'] = array(
    '#type' => 'textfield',
    '#title' => t('Insert Length'),
    '#description' => 'Enter the length of the insert in base pairs. This will not apply to all sequencing technologies.',
    '#element_validate' => array('element_validate_integer_positive'),
    '#default_value' => (!empty($node->insert_length)) ? $node->insert_length : '',
  );

  $form['library']['frag_len'] = array(
    '#type' => 'textfield',
    '#title' => t('Fragment Length'),
    '#description' => 'Enter the length of the fragment in base pairs. This will not apply to all sequencing technologies.',
    '#element_validate' => array('element_validate_integer_positive'),
    '#default_value' => (!empty($node->fragment_length)) ? $node->fragment_length : '',
  );


  $form['library']['index_type'] = array(
    '#type' => 'select',
    '#title' => t('Index Type'),
    '#description' => t('The collection of barcodes used to identify samples. If "Other", please elaborate in the "Run Description".'),
    '#options' => $options['index_type'],
    '#required' => TRUE,
    '#default_value' => (isset($node->index_type)) ? $node->index_type : '',
  );

  $form['sequencing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sequencing-Specific Details')
  );

  $form['sequencing']['technology'] = array(
    '#type' => 'select',
    '#title' => 'Sequencing Technology',
    '#description' => 'Choose the sequencing platform.',
    '#options' => $options['technology'],
    '#required' => TRUE,
    '#default_value' => (isset($node->technology)) ? $node->technology : '',
  );

  $form['sequencing']['read_type'] = array(
    '#type' => 'select',
    '#title' => t('Read Type'),
    '#description' => t('Choose the method used to generate the reads.'),
    '#options' => $options['read_type'],
    '#required' => TRUE,
    '#default_value' => (isset($node->read_type)) ? $node->read_type : '',
  );

  $form['file'] = array(
    '#type' => 'fieldset',
    '#title' => 'File-Specific Details',
  );

  $form['file']['filename'] = array(
    '#type' => 'textfield',
    '#title' => 'File Name',
    '#description' => 'Specify the full name of the file <em>including the path and extension</em>.',
    '#default_value' => (isset($node->filename)) ? $node->filename : '',
  );

  $form['file']['md5sum'] = array(
    '#type' => 'textfield',
    '#title' => 'MD5 Checksum',
    '#description' => 'The MD5 hash describing the file (used to verify the file is complete & intact).',
    '#default_value' => (isset($node->md5sum)) ? $node->md5sum : '',
  );

  $form['sample'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sample Details'),
  );

  $xls_template = drupal_get_path('module','lims') . '/LIMS-Sequence_Run-samples_template.xls';
  $tsv_template = drupal_get_path('module','lims') . '/LIMS-Sequence_Run-samples_template.tsv';
  $help = '<br /><strong>Samples File Template:</strong> <a href="' . url($xls_template) . '">XLS</a>, <a href="' . url($tsv_template) . '">TSV</a><br /><br />
    <strong>Samples File Specifications:</strong><br />
    A tab-delimited file where each line describes a single well/lane of sequencing. Each line should have the the following columns:
    <ol>
      <li><em>Index ID<span style="color:red" title="required">*</span>:</em> The name of the index used for this particular sample (ie: GBS-Idx1).</li>
      <li><em>Index Sequence<span style="color:red" title="required">*</span>:</em> The sequence of the index (ie: CTCC).</li>
      <li><em>Sample Name<span style="color:red" title="required">*</span>:</em> The name you gave your sample. NOTE: IF your sample name exactly matches that of the germplasm you extracted it from then the KP:GERM ID will be looked-up automatically.</li>
      <li><em>Sample Accession<span style="color:red" title="required"><sup>++</sup></span>:</em> The KP:GERM ID in KnowPulse for the germplasm your sample was extracted from (ie: KP:GERM58 if your sample is CDC Redberry).</li>
      <li><em>Plate Well:</em> The location of the sample in the plate (ie: A1).</li>
      <li><em>Sample Description:</em> Any additional notes or description of the sample (ie: seed source, number of plants pooled, etc.).</li>
    </ol>
      <div class="footnotes"><span style="color:red" title="required">* Required Columns.</span></div>
      <div class="footnotes"><span style="color:red" title="required"><sup>++</sup> Accession is required unless your sample name exactly matches germplasm in KnowPulse. The accession in the file (if supplied) will always take precedence.</span></div>
      <div class="footnotes"><em>NOTE: The file should contain 6 columns. If the column is not required then leave it empty.</em></div>
    <br />';
  $form['sample']['file_help'] = array(
    '#type' => 'markup',
    '#markup' => $help
  );

  // Needed for file upload.
  $form['#attributes']['enctype'] = 'multipart/form-data';

  // Provide field to upload file.
  $samples_fid = (isset($node->samples_fid)) ? $node->samples_fid : NULL;
  $samples_fid = (isset($form_state['values']['sample_file'])) ? $form_state['values']['sample_file'] : $samples_fid;
  $samples_fid = (isset($form_state['values']) AND empty($form_state['values']['sample_file'])) ? 0 : $samples_fid;
  $form['sample']['sample_file'] = array(
    '#type' => 'managed_file',
    '#title' => 'Samples File',
    '#process' => array('seqrun_file_element_process'),
    '#upload_validators' => array('file_validate_extensions' => array('txt tsv')),
    '#default_value' => $samples_fid,
    '#ajax' => array(
      'callback' => 'ajax_samples_file_show_snippet_callback',
      'wrapper' => 'samples-table',
    )
  );

  $form['sample']['sample_snippet'] = array(
    '#type' => 'markup',
    '#markup' => ''
  );

  if (!empty($samples_fid)) {
    // Generate Samples Snippet to allow users to evaluate
    // whether their file was parsed correctly.
    $header = array(
      array('data' => 'Index', 'colspan' => 2, 'style' => 'text-align:center;'),
      array('data' => 'Sample', 'colspan' => 4, 'style' => 'text-align:center;'),
    );
    $rows = array();
    // Second header.
    $rows[] = array(
      array( 'data' => 'ID', 'header' => TRUE),
      array( 'data' => 'Sequence', 'header' => TRUE),
      array( 'data' => 'Name', 'header' => TRUE),
      array( 'data' => 'Accession', 'header' => TRUE),
      array( 'data' => 'Plate Well', 'header' => TRUE),
      array( 'data' => 'Description', 'header' => TRUE),
    );
    $i = 0;
    $num_samples = db_query('SELECT count(*) FROM {lims_seqrun_samples} WHERE samples_fid=:fid', array(':fid' => $samples_fid))->fetchField();
    $sql = 'SELECT * FROM {lims_seqrun_samples} WHERE samples_fid=:fid ORDER BY sample_id ASC';
    $samples = db_query($sql, array(':fid' => $samples_fid));
    foreach ($samples as $sample) {
      $i++;
      if ($i >= 20) { break; }
      $rows[] = array(
        $sample->index_id,
        $sample->index_seq,
        $sample->sample_name,
        $sample->sample_accession,
        $sample->plate_well,
        $sample->sample_description
      );
    }
    if ($num_samples > 0) {
      $form['sample']['sample_snippet']['#markup'] =
          '<br /><br /><strong>Table 1: A subset of parsed samples from the uploaded file.</strong>'
          . '<br />Please use the following truncated sample list to ensure your file has been pased correctly.'
          . theme('table',array(
            'header' => $header,
            'rows' => $rows,
            'attributes' => array('style' => 'width:auto')
          ))
          .'<strong>Total Samples Parsed: ' . $num_samples . '</strong> (only a subset of which are shown above)';
    }
  }

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Run Description'),
    '#description' => t('Any additional details related to this sequencing run.'),
    '#default_value' => (isset($node->description)) ? $node->description : '',
  );

  return $form;
}

/**
 * A custom process function for the seqrun sample details file form element.
 */
function seqrun_file_element_process($element, &$form_state, &$form) {

  // Pre-render the managed file field in order to gain access to the button.
  $element = file_managed_file_process($element, $form_state, $form);

  // Move the samples table into the file element so it can piggy-back
  // on the file upload/remove ajax.
  $element['sample_snippet'] = $form['sample']['sample_snippet'];
  unset($form['sample']['sample_snippet']);

  // Add a validate handler so we can do stuff!
  $element['upload_button']['#submit'][] = 'seqrun_sample_file_submit';
  $element['remove_button']['#submit'][] = 'seqrun_sample_file_remove_submit';

  return $element;
}

/**
 * Custom handler for Sequencing Run samples file.
 */
function seqrun_sample_file_submit($form, &$form_state) {
  $error = FALSE;

  ini_set('auto_detect_line_endings', true);

  // First save the file.
  $file = file_save_upload('sample_file');

  // As long as the file was saved properly (ie: no validation issues so far)
  // then we can start processing it.
  if (!empty($file)) {

    // Open the file for processing.
    $sample_file = fopen($file->uri, 'r');
    $header = fgetcsv($sample_file, 0, "\t");
    if (sizeof($header) < 6) {
      $error = TRUE;
      drupal_set_message('Six columns are required for every line.', 'error');
      //form_set_error('sample_file', 'Line '.$i.': 6 columns are required for every line.');
    }

    // For each line:
    $i = 1;
    while( $line = fgetcsv($sample_file, 0, "\t") ) {
      $i++;
      $error = FALSE;
      if (is_array($line)) {

        // Reset extra fields
        $sample_stock_id = NULL;
        $sample_stock_nid = NULL;

        // Trim whitespace for each column.
        foreach ($line as $k => $v) {
          $line[$k] = trim($v);
        }

        // Validate the line.
        // -- Check no column is longer than the database allows.
        $expected = array(80, 80, 80, 80, 10);
        foreach ($expected as $k => $max) {
          if (strlen($line[$k]) > $max) {
            $error = TRUE;
            $column = ($k == 0) ? 'Index ID' : NULL;
            $column = ($k == 1) ? 'Index Sequence' : $column;
            $column = ($k == 2) ? 'Sample Name' : $column;
            $column = ($k == 3) ? 'Sample Accession' : $column;
            $column = ($k == 4) ? 'Plate Well' : $column;
            drupal_set_message('Line '.$i.':  The <i>'.$column.'</i> is too long (maximum length: '.$max.' characters).', 'error');
          }
        }
        // -- 1st three columns are not empty.
        if (empty($line[0]) OR empty($line[1]) OR empty($line[2])) {
          $error = TRUE;
          drupal_set_message('Line '.$i.': The first three columns (Index ID, Index Sequence & Sample Name) are required and thus should not be empty.','error');
          //form_set_error('sample_file', 'Line '.$i.': The first three columns (Index ID, Index Sequence & Sample Name) are required and thus should not be empty.');
        }
        // -- 2nd column is all sequence.
        if (!empty($line[2]) AND !preg_match('/^[ATGCatgc]+$/', $line[1])) {
          $error = TRUE;
          drupal_set_message('Line '.$i.': The index sequence should consist of only ATGC.','error');
          //form_set_error('sample_file', 'Line '.$i.': The index sequence should consist of only ATGC.');
        }
        // -- Accession should always be KP:GERM###.
        if (!empty($line[3]) AND !preg_match('/KP:GERM\d+/', $line[3])) {
          $error = TRUE;
          drupal_set_message('Line '.$i.': The accession should always be KP:GERM### in full capitals.','error');
        }
        // -- Ensure KP:GERM exists.
        elseif (!empty($line[3])) {
          $kpgerm = chado_query('SELECT stock_id FROM {stock} WHERE uniquename=:accession', array(':accession' => $line[3]))->fetchField();
          if (empty($kpgerm)) {
            $error = TRUE;
            drupal_set_message('Line '.$i.': The accession provided, <i>'.$line[3].'</i>, does not exist in KnowPulse.', 'error');
          }
          else {
            $sample_stock_id = $kpgerm;
            $sample_stock_nid = chado_get_nid_from_id('stock', $sample_stock_id);
          }
        }
        // -- Attempt Auto-detect Accession based on sample name.
        else {

          // First TRY to look it up based on sample name.
          $kpgerm = chado_query('SELECT uniquename, stock_id FROM {stock} WHERE name=:sample', array(':sample' => $line[2]))->fetchObject();
          if (!empty($kpgerm)) {
            $line[3] = $kpgerm->uniquename;
            $sample_stock_id = $kpgerm->stock_id;
            $sample_stock_nid = chado_get_nid_from_id('stock', $sample_stock_id);
          }
          // If unable to then provide error message. :(
          else {
            $error = TRUE;
            drupal_set_message('Line '.$i.': The accession is required and could not be automatically determined by the sample name. Please provide it in the file.','error');
            //form_set_error('sample_file', 'Line '.$i.': The accession should always be KP:GERM### in full capitals.');
          }
        }

        // Save it to the database.
        if (!$error) {
          $sample = array(
            'samples_fid' => $file->fid,
            'index_id' => $line[0],
            'index_seq' => $line[1],
            'sample_name' => $line[2],
            'sample_accession' => $line[3],
            'plate_well' => $line[4],
            'sample_description' => (isset($line[5])) ? $line[5] : '',
            'sample_stock_id' => $sample_stock_id,
            'sample_stock_nid' => $sample_stock_nid,
          );
          drupal_write_record('lims_seqrun_samples', $sample);
        }
      }
    }
  }

}

/**
 * Custom handler for Sequencing Run samples file.
 */
function seqrun_sample_file_remove_submit($form, &$form_state) {

  // Clean-up sample table to ensure that no samples from previously
  // uploaded files hang around.
  db_query('DELETE FROM {lims_seqrun_samples} WHERE samples_fid NOT IN (SELECT samples_fid FROM {lims_seqrun})');

  // Remove the fid from this node.
  if (isset($form_state['node']->nid)) {
    db_query("UPDATE {lims_seqrun} SET samples_fid=NULL WHERE nid=:nid",
      array(':nid' => $form_state['node']->nid));
  }
}

/**
 *
 */
function ajax_samples_file_show_snippet_callback($form, $form_state) {
  return $form['sample']['sample_snippet'];
}

/**
 * Implement hook_validate().
 * Validates the data entered into the create/edit "Sequencing Run" form
 * before either inserting, seqrun_updating(), or updating, seqrun_insert().
 */
function seqrun_validate(&$node, $form, &$form_state) {

  // Ensure the insert & fragment length are integers.
  // Taken care of by #element_validate.

  // Ensure the file name has not already been associated with a sequencing run.
    $filename = NULL;
  if (isset($node->nid) AND !empty($form_state['values']['filename'])) {
    $filename = db_query("SELECT nid from {lims_seqrun} WHERE filename = :filename AND nid != :nid LIMIT 1", array(":filename" => $form_state['values']['filename'], ':nid' => $node->nid))->fetchField();
  }
  elseif (!empty($form_state['values']['filename'])) {
    $filename = db_query("SELECT nid from {lims_seqrun} WHERE filename = :filename LIMIT 1", array(":filename" => $form_state['values']['filename']))->fetchField();
  }
  if (!empty($filename)) {
    form_set_error('filename', t('This file has already been associated with <a href="@url">a sequencing run</a>.', array('@url' => 'node/'.$filename)));
  }

  // Ensure the file exists
  // @todo: unsure how to do this when storage is not yet mounted.

}

/**
 * Implements hook_insert().
 * Handles insertion of our custom content when a new "Sequencing Run"
 * has been created.
 */
function seqrun_insert($node) {

  // First add data for the core sequencing run.
  $record = array(
    'nid' => $node->nid,
    'run_name' => $node->title,
    'filename' => $node->filename,
    'md5sum' => $node->md5sum,
    'library_type' => $node->library_type,
    'insert_length' => $node->insert_len,
    'fragment_length' => $node->frag_len,
    'index_type' => $node->index_type,
    'technology' => $node->technology,
    'read_type' => $node->read_type,
    'description' => $node->description,
  );
  if (isset($node->sample_file)) {
    $record['samples_fid'] = $node->sample_file;
  }
  drupal_write_record('lims_seqrun', $record);

  // Now associate the organisms/species.
  foreach($node->species as $organism_id) {
    $species = array(
      'run_id' => $record['run_id'],
      'organism_id' => $organism_id
    );
    drupal_write_record('lims_seqrun_species', $species);
  }

  // Clean-up sample table to ensure that no samples from previously
  // uploaded files hang around.
  db_query('DELETE FROM {lims_seqrun_samples} WHERE samples_fid NOT IN (SELECT samples_fid FROM {lims_seqrun})');
}

/**
 * Implements hook_update().
 * Handles updating our custom content when a pre-existing "Sequencing Run"
 * is edited.
 */
function seqrun_update($node) {

  // First update data for the core sequencing run.
  $record = array(
    'nid' => $node->nid,
    'run_id' => $node->run_id,
    'run_name' => $node->title,
    'filename' => $node->filename,
    'md5sum' => $node->md5sum,
    'library_type' => $node->library_type,
    'insert_length' => $node->insert_len,
    'fragment_length' => $node->frag_len,
    'index_type' => $node->index_type,
    'technology' => $node->technology,
    'read_type' => $node->read_type,
    'description' => $node->description,
  );
  if (isset($node->sample_file)) {
    $record['samples_fid'] = $node->sample_file;
  }
  drupal_write_record('lims_seqrun', $record, 'run_id');

  // Then remove organisms so we can insert fresh.
  db_query("DELETE FROM {lims_seqrun_species} WHERE run_id=:run_id", array(':run_id' => $node->run_id));

  // Now associate the organisms/species.
  foreach($node->species as $organism_id) {
    $species = array(
      'run_id' => $record['run_id'],
      'organism_id' => $organism_id
    );
    drupal_write_record('lims_seqrun_species', $species);
  }

  // Clean-up sample table to ensure that no samples from previously
  // uploaded files hang around.
  db_query('DELETE FROM {lims_seqrun_samples} WHERE samples_fid NOT IN (SELECT samples_fid FROM {lims_seqrun})');
}

/**
 * Implements hook_delete().
 * Handles deletetion of our custom content when a "Sequencing Run" is deleted.
 */
function seqrun_delete($node) {
  db_query('DELETE FROM {lims_seqrun} WHERE nid=:nid', array(':nid' => $node->nid));
}

/**
 * Implements hook_view().
 */
function seqrun_view($node, $view_mode, $langcode = NULL) {


  // Prepare Species for display.
  $species = array();
  foreach ($node->species as $s) {
    $species[] = '<i>' . $s->genus . ' ' . $s->species . '</i>';
  }

  // Main Table
  //-------------------------
  $rows = array();
  $rows[] = array(
    array( 'data' => 'Name', 'header' => TRUE, 'width' => '20%' ),
    $node->run_name
  );
  $rows[] = array(
    array( 'data' => 'Species', 'header' => TRUE, 'width' => '20%' ),
    implode(', ',$species)
  );
  $rows[] = array(
    array( 'data' => 'Library Type', 'header' => TRUE, 'width' => '20%' ),
    $node->library_type
  );
  if (!empty($node->insert_length)) {
    $rows[] = array(
      array( 'data' => 'Insert Length', 'header' => TRUE, 'width' => '20%' ),
      $node->insert_length . ' bp'
    );
  }
  if (!empty($node->fragment_length)) {
    $rows[] = array(
      array( 'data' => 'Fragment Length', 'header' => TRUE, 'width' => '20%' ),
      $node->fragment_length . ' bp'
    );
  }
  $rows[] = array(
    array( 'data' => 'Index Type', 'header' => TRUE, 'width' => '20%' ),
    $node->index_type
  );
  $rows[] = array(
    array( 'data' => 'Technology', 'header' => TRUE, 'width' => '20%' ),
    $node->technology
  );
  $rows[] = array(
    array( 'data' => 'Ready Type', 'header' => TRUE, 'width' => '20%' ),
    $node->read_type
  );
  $node->content['base'] = array(
    '#markup' => theme('table',array('header' => array(), 'rows' => $rows)),
  );

  // Short File table
  //-------------------------
  $rows = array();
  $rows[] = array(
    array( 'data' => 'File', 'header' => TRUE, 'width' => '20%' ),
    $node->filename
  );
  $rows[] = array(
    array( 'data' => 'MD5 Checksum', 'header' => TRUE, 'width' => '20%' ),
    $node->md5sum
  );
  $node->content['file'] = array(
    '#markup' => theme('table',array('header' => array(), 'rows' => $rows)),
  );

  // Samples Table
  //-------------------------
  if (sizeof($node->samples) > 0) {
    $header = array(
      array('data' => 'Index', 'colspan' => 2, 'style' => 'text-align:center;'),
      array('data' => 'Sample', 'colspan' => 4, 'style' => 'text-align:center;'),
    );
    $rows = array();
    // Second header.
    $rows[] = array(
      array( 'data' => 'ID', 'header' => TRUE),
      array( 'data' => 'Sequence', 'header' => TRUE),
      array( 'data' => 'Name', 'header' => TRUE),
      array( 'data' => 'Accession', 'header' => TRUE),
      array( 'data' => 'Plate Well', 'header' => TRUE),
      array( 'data' => 'Description', 'header' => TRUE),
    );
    foreach ($node->samples as $sample) {

      $sample_name = (isset($sample->sample_stock_nid)) ? l($sample->sample_name, 'node/'.$sample->sample_stock_nid, array('attributes' => array('target' => '_blank'))) : $sample->sample_name;
      $sample_accession = (isset($sample->sample_stock_nid)) ? l($sample->sample_accession, 'node/'.$sample->sample_stock_nid, array('attributes' => array('target' => '_blank'))) : $sample->sample_accession;

      $rows[] = array(
        $sample->index_id,
        $sample->index_seq,
        $sample_name,
        $sample_accession,
        $sample->plate_well,
        $sample->sample_description
      );
    }

    $node->content['samples'] = array(
      '#markup' => '<br /><h2>Samples</h2>' . theme('table',array('header' => $header, 'rows' => $rows)),
    );
  }
  else {
    $node->content['samples'] = array(
      '#markup' => '<br /><h3 style="margin:0;padding:0;color:red">No samples uploaded for this Sequencing Run.</h3><div>Please Edit this page and upload a tab-delimited file adhering to the specifications mentioned under "Samples Details"</div>',
    );
  }
  return $node;
}
